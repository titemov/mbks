Overall:
"G" and "g" - are different names (case-sensitive)
create a flag in file indicating that something is being written in it.
create flag in file indicating that something changed in it. (to reload employee program?)

Button -> backend stage func (returns stage, writes result string in private field) -> getResult (reutrn contents of private filed)-> other actions... -> Done.


Admin:
- new subjects adding (up to 256 symbs long)
- new objects adding (only eng letters)
- changing or erasing currect object and subjects

- Granting\taking access
- Matrix showcase
- Interactive matrix that allows to change accesses (fig.1)

- Export matrix as file
- Import matrix from file
- try-catch?

- Create a CLI that supports following commands:
	- grant			[subjects]	[objects]	-> grants given set of subjects access to given set of objects
	- create		subject		[objects]	-> creates new subject with access to given set of objects. If subject exists - just grant access. If object(s) doesnt exist - create new. 
	- remove		[subjects]	[objects]	-> removes given set of subkects access to given set of objects
	- grant_all		[subjects]				-> grants given set of subjects access to all objects
	- remove_all	[subjects]				-> removes given set of subjects access to all objects
	to enter a command in this CLI user must press "enter" button in GUI




Client:
- Authorization
	- Employee name entering textfield
	- Check if subject name exists in matrix (no name -> error)
- Employee can enter text (random eng letters)
- return only letters to which employee have access

- Autoupdate if matrix changes
- No need in restart



Лабораторная работа 3. Система управления доступом

Опыт последних трёх недель показал, что онлайн-матрица доступа оказалась неповоротливой и неудобной в использовании, поэтому сотрудники отдела документооборота на основе случайных символов поручили вам разработку новой офлайн-системы, учитывающей прошлые ошибки. 

Вам предстоит помочь ОДНОСС фильтровать случайные символы, чтобы они не попали в случайные и крайне вредоносные руки. 

Задача: разработать два приложения для управления правами доступа: администратора и пользователя. Программы должны обеспечивать управление матрицей доступа и фильтрацию данных на основе установленных прав. 

Требования к программе администратора 

Базовый функционал управления матрицей доступа: 

· Управление субъектами и объектами:
  · Добавление новых субъектов (строка до 256 символов в длину)
  · Добавление новых объектов (обозначаются буквами латинского алфавита)
  · Удаление и изменение существующих субъектов и объектов
  · Регистрозависимые имена (G и g - разные объекты)
· Управление правами доступа:
  · Выдача прав доступа субъектам к объектам
  · Визуальное отображение матрицы доступа
  · Возможность интерактивного изменения матрицы доступа
· Работа с данными:
  · Сохранение матрицы доступа в файл
  · Загрузка матрицы доступа из файла
  · Обработка ошибок ввода данных 

Командный интерфейс для управления доступом: 

1. Команда grant 

· Назначение: выдача прав доступа
· Функциональность: предоставление заданному набору субъектов прав доступа на заданный набор объектов
· Входные параметры: список субъектов, список объектов 

2. Команда create 

· Назначение: создание субъектов с правами
· Функциональность:
  · Создание нового субъекта с доступом к заданному набору объектов
  · Если субъект уже существует - работает как grant
  · Если указанные объекты не существуют - автоматическое создание
  · Поддержка создания с пустым набором прав
· Входные параметры: субъект, список объектов 

3. Команда remove 

· Назначение: удаление прав доступа
· Функциональность: удаление у заданного набора субъектов прав на заданный набор объектов
· Входные параметры: список субъектов, список объектов 

4. Расширенные режимы: 

· grant_all - выдача указанным субъектам прав доступа на ВСЕ существующие объекты
· remove_all - удаление у указанных субъектов прав доступа на ВСЕ объекты 

Технические требования: 

· Все команды должны быть реализованы как отдельные функции
· Обязательная обработка ошибок выполнения команд
· Совместимость с программой пользователя 

Требования к программе пользователя 

Функциональность: 

· Авторизация:
  · Ввод имени пользователя (субъекта)
  · Проверка существования пользователя в матрице доступа
  · Обработка ошибок ввода
· Фильтрация данных:
  · Ввод произвольной текстовой строки
  · Автоматическая фильтрация строки согласно правам доступа пользователя
  · Вывод отфильтрованного результата
· Пример работы:
  · Пользователь: "Ivan" с правами доступа к объектам "AaBM"
  · Входная строка: "ABCDEaF"
  · Результат: "ABa" 

Особенности работы: 

· Автоматическое обновление прав при изменении матрицы доступа администратором
· Реальное время работы без необходимости перезапуска 

Общие технические требования 

Интерфейс: 

· Тип приложения: оконное с графическим интерфейсом
· Запрещено: консольные приложения
· Интерфейс: все элементы управления должны быть подписаны


Обработка ошибок: 

· Валидация вводимых данных
· Обработка некорректных команд
· Защита от неправильных операций
· Информативные сообщения об ошибках 

Совместимость: 

· Обе программы должны корректно работать вместе
· Изменения в матрице доступа должны сразу отражаться в работе пользователя
· Единый формат хранения данных 

Вы можете использовать любой язык программирования, поддерживающий создание графических интерфейсов. 

Критерии успешного выполнения: 

· Корректная работа всех функций администратора
· Правильная фильтрация данных в программе пользователя
· Обработка всех типов ошибок
· Совместимость между программами администратора и пользователя